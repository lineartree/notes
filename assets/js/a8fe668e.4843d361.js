"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2976],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=s(t),g=o,d=f["".concat(c,".").concat(g)]||f[g]||u[g]||a;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7509:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],i={},c="Pyglet",s={unversionedId:"pyglet/first",id:"pyglet/first",title:"Pyglet",description:"Just three lines to create a window.",source:"@site/docs/pyglet/first.md",sourceDirName:"pyglet",slug:"/pyglet/first",permalink:"/notes/docs/pyglet/first",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pyglet/first.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenGL Functions",permalink:"/notes/docs/opengl/functions"},next:{title:"Ursina",permalink:"/notes/docs/ursina/initial"}},p={},u=[],f={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pyglet"},"Pyglet"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import pyglet\n\nwindow = pyglet.window.Window(800, 600, "Game")\n\npyglet.app.run()\n')),(0,a.kt)("p",null,"Just three lines to create a window. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import pyglet\n\nfrom pyglet.gl import *\n\n\nclass Triangle:\n    def __init__(self):\n        self.vertices = pyglet.graphics.vertex_list(3, ('v3f', [-0.5, -0.5, -0.0,  0.5, -0.5, 0.0,  0.0, 0.5, 0.0]),\n                                                       ('c3B', [100, 300, 220,  200, 110, 100,  100, 250, 100]))\n\n\nclass MyWindow(pyglet.window.Window):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.set_minimum_size(400, 300)\n        glClearColor(0.1, 0.2, 0.3, 1.0)\n\n        self.triangle = Triangle()\n\n    def on_draw(self):\n        # glClear(GL_COLOR_BUFFER_BIT)\n        self.clear()\n        self.triangle.vertices.draw(GL_TRIANGLES)\n\n    def on_resize(self, width, height):\n        glViewport(0, 0, width, height)\n\n\nif __name__ == \"__main__\":\n    window = MyWindow(1280, 720, \"Game\", resizable=True)\n    # window.on_draw()\n    pyglet.app.run()\n")),(0,a.kt)("p",null,"Few lines for create a triangle."),(0,a.kt)("p",null,"Don't forget to add glClear function to clear the previous drawing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"glClear(GL_COLOR_BUFFER_BIT)\n")),(0,a.kt)("p",null,"Or you can change the background color."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"glClearColor(0.1, 0.2, 0.3, 1.0)\nself.clear()\n")))}g.isMDXComponent=!0}}]);