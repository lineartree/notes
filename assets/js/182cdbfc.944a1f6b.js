"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1374],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),k=a,m=d["".concat(p,".").concat(k)]||d[k]||u[k]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3023:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={},p="OpenGL Functions",s={unversionedId:"opengl/functions",id:"opengl/functions",title:"OpenGL Functions",description:"Examples",source:"@site/docs/opengl/functions.md",sourceDirName:"opengl",slug:"/opengl/functions",permalink:"/notes/docs/opengl/functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/opengl/functions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"notes",permalink:"/notes/docs/minecraft-clone/notes"},next:{title:"Pyglet",permalink:"/notes/docs/pyglet/first"}},c={},u=[{value:"Examples",id:"examples",level:2},{value:"cpp",id:"cpp",level:3},{value:"pyglet",id:"pyglet",level:3},{value:"glBufferData",id:"glbufferdata",level:2},{value:"glVertexAttribPointer",id:"glvertexattribpointer",level:2},{value:"glEnableVertexAttribArray",id:"glenablevertexattribarray",level:2},{value:"glDrawElements",id:"gldrawelements",level:2},{value:"glShaderSource",id:"glshadersource",level:2}],d={toc:u};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"opengl-functions"},"OpenGL Functions"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"cpp"},"cpp"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"unsigned int VBO, VAO, EBO;\nglGenVertexArrays(1, &VAO);\nglGenBuffers(1, &VBO);\nglGenBuffers(1, &EBO);\n\nglBindVertexArray(VAO);\n\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n\n// position attribute\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void *)0);\nglEnableVertexAttribArray(0);\n")),(0,i.kt)("h3",{id:"pyglet"},"pyglet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"self.vao = gl.GLuint(0)\n\ngl.glGenVertexArrays(1, ctypes.byref(self.vao))\ngl.glBindVertexArray(self.vao)\n\nself.vbo = gl.GLuint(0)\ngl.glGenBuffers(1, ctypes.byref(self.vbo))\ngl.glBindBuffer(gl.GL_ARRAY_BUFFER, self.vbo)\n       \ngl.glBufferData(gl.GL_ARRAY_BUFFER,\n                ctypes.sizeof(gl.GLfloat * len(vertex_positions)),\n                (gl.GLfloat * len(vertex_positions))(*vertex_positions),\n                gl.GL_STATIC_DRAW)\n\ngl.glDrawElements(gl.GL_TRIANGLES,\n                  len(indices),\n                  gl.GL_UNSIGNED_INT,\n                  None)\n\n")),(0,i.kt)("h2",{id:"glbufferdata"},"glBufferData"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"creates and initializes a buffer object's data store"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://docs.gl/gl3/glBufferData"},"More Info")),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"glBufferData(GLenum target,\n             GLsizeiptr size,\n             const void * data,\n             GLenum usage);\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"target"))),(0,i.kt)("p",null,"Specifies the target to which the buffer object is bound for ",(0,i.kt)("inlineCode",{parentName:"p"},"glBufferData"),", which must be one of the buffer binding targets in the following table:"),(0,i.kt)("p",null,"\u6307\u5b9abuffer object\u7d81\u5b9a\u5230\u7684\u76ee\u6a19"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"size"))),(0,i.kt)("p",null,"Specifies the size in bytes of the buffer object's new data store."),(0,i.kt)("p",null,"\u6307\u5b9abuffer object\u65b0\u6578\u64da\u5132\u5b58\u7684\u5927\u5c0f"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"data"))),(0,i.kt)("p",null,"Specifies a pointer to data that will be copied into the data store for initialization, or ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," if no data is to be copied."),(0,i.kt)("p",null,"\u6307\u5b9a\u4e00\u500b\u6307\u5411\u6578\u64da\u7684\u6307\u91dd\uff0c\u8a72\u6578\u64da\u5c07\u88ab\u8907\u88fd\u5230\u6578\u64da\u5132\u5b58\u4e2d\u4ee5\u9032\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u6c92\u6709\u6578\u64da\u8981\u5fa9\u5236\uff0c\u5247\u70ba\u201cNULL\u201d\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"usage"))),(0,i.kt)("p",null,"Specifies the expected usage pattern of the data store. The symbolic constant must be ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STREAM_DRAW"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STREAM_READ"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STREAM_COPY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STATIC_DRAW"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STATIC_READ"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_STATIC_COPY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_DYNAMIC_DRAW"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_DYNAMIC_READ"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_DYNAMIC_COPY"),"."),(0,i.kt)("p",null,"\u6307\u5b9a\u6578\u64da\u5132\u5b58\u7684\u9810\u671f\u4f7f\u7528\u6a21\u5f0f"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"ctypes.byref")," = ",(0,i.kt)("inlineCode",{parentName:"p"},"&")),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"ctypes.sizeof")," = ",(0,i.kt)("inlineCode",{parentName:"p"},"sizeof()")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vertex_positions"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"list[float]")," \u4e00\u5927\u5806\u7684float"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gl.GLfloat"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"c_float")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"len(vertex_positions)"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"int")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gl.GLfloat * len(vertex_positions)"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"c_float_array")," "),(0,i.kt)("p",null,"c_float * int \u5c31\u8b8a\u6210\u4e00\u5927\u5806\u7684c_float"),(0,i.kt)("h2",{id:"glvertexattribpointer"},"glVertexAttribPointer"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"define an array of generic vertex attribute data"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://docs.gl/gl3/glVertexAttribPointer"},"More Info"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"glVertexAttribPointer(GLuint index,\n                      GLint size,\n                      GLenum type,\n                      GLboolean normalized,\n                      GLsizei stride,\n                      const void * pointer);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"index"))),(0,i.kt)("p",null,"Specifies the index of the generic vertex attribute to be modified."),(0,i.kt)("p",null,"\u6307\u5b9a\u8981\u4fee\u6539\u7684\u9802\u9ede\u5c6c\u6027\u7684\u4f4d\u7f6e\u503c\u3002\u4f8b\u5982",(0,i.kt)("inlineCode",{parentName:"p"},"layout(location = 0)"),"\uff0cindex\u5c31\u70ba0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"size"))),(0,i.kt)("p",null,"Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_BGRA")," is accepted by ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribPointer"),". The initial value is 4."),(0,i.kt)("p",null,"\u6307\u5b9a\u9802\u9ede\u5c6c\u6027\u7684\u5927\u5c0f\uff0c\u4f8b\u5982\u9802\u9ede\u5c6c\u6027\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"vec3"),"(x, y, z)\uff0c\u5927\u5c0f\u5c31\u662f3"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"type"))),(0,i.kt)("p",null,"Specifies the data type of each component in the array. The symbolic constants ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_BYTE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_BYTE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_SHORT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_SHORT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_INT"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_INT")," are accepted by ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribPointer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribIPointer"),". Additionally ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_HALF_FLOAT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_FLOAT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_DOUBLE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_FIXED"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_INT_2_10_10_10_REV"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_INT_2_10_10_10_REV")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_INT_10F_11F_11F_REV")," are accepted by ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribPointer"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_DOUBLE")," is also accepted by ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribLPointer")," and is the only token accepted by the ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"type"))," parameter for that function. The initial value is ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_FLOAT"),"."),(0,i.kt)("p",null,"\u6307\u5b9a\u6578\u64da\u7684\u985e\u578b"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"normalized"))),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"glVertexAttribPointer"),", specifies whether fixed-point data values should be normalized (",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRUE"),") or converted directly as fixed-point values (",(0,i.kt)("inlineCode",{parentName:"p"},"GL_FALSE"),") when they are accessed."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"stride"))),(0,i.kt)("p",null,"Specifies the byte offset between consecutive generic vertex attributes. If ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"stride"))," is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"pointer"))),(0,i.kt)("p",null,"Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_ARRAY_BUFFER")," target. The initial value is 0."),(0,i.kt)("h2",{id:"glenablevertexattribarray"},"glEnableVertexAttribArray"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Enable or disable a generic vertex attribute array"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://docs.gl/gl3/glEnableVertexAttribArray"},"More Info"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"glEnableVertexAttribArray(GLuint index);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"index"))),(0,i.kt)("p",null,"Specifies the index of the generic vertex attribute to be enabled or disabled."),(0,i.kt)("p",null,"\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u51fa\u65bc\u6027\u80fd\u8003\u616e\uff0c\u6240\u6709\u9802\u9ede\u8457\u8272\u5668\u7684\u5c6c\u6027\uff08Attribute\uff09\u8b8a\u91cf\u90fd\u662f\u95dc\u9589\u7684\uff0c\u610f\u5473\u8457\u6578\u64da\u5728\u8457\u8272\u5668\u7aef\u662f\u4e0d\u53ef\u898b\u7684\uff0c\u54ea\u6015\u6578\u64da\u5df2\u7d93\u4e0a\u50b3\u5230GPU\uff0c\u7531glEnableVertexAttribArray\u555f\u7528\u6307\u5b9a\u5c6c\u6027\uff0c\u624d\u53ef\u5728\u9802\u9ede\u8457\u8272\u5668\u4e2d\u8a2a\u554f\u9010\u9802\u9ede\u7684\u5c6c\u6027\u6578\u64da\u3002 "),(0,i.kt)("p",null,"glVertexAttribPointer\u6216VBO\u53ea\u662f\u5efa\u7acbCPU\u548cGPU\u4e4b\u9593\u7684\u908f\u8f2f\u9023\u63a5\uff0c\u5f9e\u800c\u5be6\u73fe\u4e86CPU\u6578\u64da\u4e0a\u50b3\u81f3GPU\u3002\u4f46\u662f\uff0c\u6578\u64da\u5728GPU\u7aef\u662f\u5426\u53ef\u898b\uff0c\u5373\uff0c\u8457\u8272\u5668\u80fd\u5426\u8b80\u53d6\u5230\u6578\u64da\uff0c\u7531\u662f\u5426\u555f\u7528\u4e86\u5c0d\u61c9\u7684\u5c6c\u6027\u6c7a\u5b9a\uff0c\u9019\u5c31\u662fglEnableVertexAttribArray\u7684\u529f\u80fd\uff0c\u5141\u8a31\u9802\u9ede\u8457\u8272\u5668\u8b80\u53d6GPU\uff08\u670d\u52d9\u5668\u7aef\uff09\u6578\u64da\u3002"),(0,i.kt)("p",null,"\u90a3\u9ebc\uff0cglEnableVertexAttribArray\u61c9\u8a72\u5728glVertexAttribPointer\u4e4b\u524d\u9084\u662f\u4e4b\u5f8c\u8abf\u7528\uff1f\u7b54\u6848\u662f\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u5728\u7e6a\u5716\u8abf\u7528\uff08glDraw*\u7cfb\u5217\u51fd\u6578\uff09\u524d\u8abf\u7528\u5373\u53ef\u3002"),(0,i.kt)("h2",{id:"gldrawelements"},"glDrawElements"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"render primitives from array data"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://docs.gl/gl3/glDrawElements"},"More Info"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"glDrawElements(GLenum mode,\n               GLsizei count,\n               GLenum type,\n               const void * indices);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"mode"))),(0,i.kt)("p",null,"Specifies what kind of primitives to render. Symbolic constants ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_POINTS"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_LINE_STRIP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_LINE_LOOP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_LINES"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_LINE_STRIP_ADJACENCY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_LINES_ADJACENCY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRIANGLE_STRIP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRIANGLE_FAN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRIANGLES"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRIANGLE_STRIP_ADJACENCY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_TRIANGLES_ADJACENCY")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_PATCHES")," are accepted."),(0,i.kt)("p",null,"\u6307\u5b9a\u8981\u6e32\u67d3\u7684\u57fa\u5143\u985e\u578b\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"count"))),(0,i.kt)("p",null,"Specifies the number of elements to be rendered."),(0,i.kt)("p",null,"\u6307\u5b9a\u8981\u6e32\u67d3\u7684\u5143\u7d20\u6578\u91cf\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"type"))),(0,i.kt)("p",null,"Specifies the type of the values in ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"indices")),". Must be one of ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_BYTE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_SHORT"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"GL_UNSIGNED_INT"),"."),(0,i.kt)("p",null,"\u6307\u5b9a",(0,i.kt)("inlineCode",{parentName:"p"},"indices"),"\u4e2d\u503c\u7684\u985e\u578b"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"indices"))),(0,i.kt)("p",null,"Specifies a pointer to the location where the indices are stored."),(0,i.kt)("p",null,"\u6307\u5b9a\u6307\u5411\u5132\u5b58\u7d22\u5f15\u7684\u4f4d\u7f6e\u7684\u6307\u91dd"),(0,i.kt)("h2",{id:"glshadersource"},"glShaderSource"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Replaces the source code in a shader object"),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://docs.gl/gl3/glShaderSource"},"More Info"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"glShaderSource( GLuint shader,\n               GLsizei count,\n               const GLchar **string,\n               const GLint *length);\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"shader"))),(0,i.kt)("p",null,"Specifies the handle of the shader object whose source code is to be replaced."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"count"))),(0,i.kt)("p",null,"Specifies the number of elements in the ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"string"))," and ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"length"))," arrays."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"string"))),(0,i.kt)("p",null,"Specifies an array of pointers to strings containing the source code to be loaded into the shader."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"length"))),(0,i.kt)("p",null,"Specifies an array of string lengths."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'source_file = open(source_path, "rb")\n')),(0,i.kt)("p",null,"source_file: ","[BufferedReader]"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"source = source_file.read()\n")),(0,i.kt)("p",null,"source: ","[bytes]"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"source_buffer = ctypes.create_string_buffer(source)\n")),(0,i.kt)("p",null,"source_buffer: Array","[c_char]"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"buffer_pointer = ctypes.cast(\n    ctypes.pointer(ctypes.pointer(source_buffer)), # pointer[pointer[Array[c_char]]]\n    ctypes.POINTER(ctypes.POINTER(ctypes.c_char))) # Type[pointer[pointer[c_char]]]\n")),(0,i.kt)("p",null,"buffer_pointer: pointer[pointer","[c_char]","]"))}k.isMDXComponent=!0}}]);